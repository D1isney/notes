<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wms.dao.TaskDao">

    <!-- 通用查询映射结果 -->
    <resultMap id="TaskMap" type="com.wms.pojo.Task">
        <id column="id" property="id" />
        <result column="name" property="name" />
        <result column="goods_id" property="goodsId" />
        <result column="inventory_id" property="inventoryId" />
        <result column="code" property="code" />
        <result column="status" property="status" />
        <result column="type" property="type" />
        <result column="create_time" property="createTime" />
        <result column="update_time" property="updateTime" />
        <result column="create_member" property="createMember" />
        <result column="update_member" property="updateMember" />
        <result column="remark" property="remark" />
        <result column="resource" property="resource" />
    </resultMap>

    <!-- 通用查询映射结果 Vo) -->
    <resultMap id="TaskVoMap" type="com.wms.vo.TaskVo" extends="TaskMap">
        <result column="create_username" property="createUsername"/>
        <result column="update_username" property="updateUsername"/>
        <result column="inventory_name" property="inventoryName"/>
        <result column="inventory_layer" property="inventoryLayer"/>
        <result column="inventory_status" property="inventoryStatus"/>
        <result column="goods_name" property="goodsName"/>
        <result column="goods_type" property="goodsType"/>
    </resultMap>
    <!-- 保存列 -->
    <sql id="saveColumnBase">
        `name`,
        `goods_id`,
        `inventory_id`,
        `code`,
        `status`,
        `type`,
        `create_time`,
        `update_time`,
        `create_member`,
        `update_member`,
        `remark`,
        `resource`
    </sql>
    <!-- 保存列value -->
    <sql id="saveColumnValue">
        #{entity.name},
        #{entity.goodsId},
        #{entity.inventoryId},
        #{entity.code},
        #{entity.status},
        #{entity.type},
        #{entity.createTime},
        #{entity.updateTime},
        #{entity.createMember},
        #{entity.updateMember},
        #{entity.remark},
        #{entity.resource}
    </sql>

    <sql id="nameColumn">`code` = #{entity.name},</sql>
    <sql id="goodsIdColumn">`code` = #{entity.goodsId},</sql>
    <sql id="inventoryIdColumn">`code` = #{entity.inventoryId},</sql>
    <sql id="codeColumn">`code` = #{entity.code},</sql>
    <sql id="statusColumn">`name` = #{entity.status},</sql>
    <sql id="typeColumn">`type` = #{entity.type},</sql>
    <sql id="createTimeColumn">`create_time` = #{entity.createTime},</sql>
    <sql id="updateTimeColumn">`update_time` = #{entity.updateTime},</sql>
    <sql id="createMemberColumn">`create_member` = #{entity.createMember},</sql>
    <sql id="updateMemberColumn">`update_member` = #{entity.updateMember},</sql>
    <sql id="remarkColumn">`remark` = #{entity.remark}</sql>
    <sql id="resourceColumn">`remark` = #{entity.resource}</sql>

    <sql id="updateColumnNotNull">
        <set>
            <if test="entity.name != null"><include refid="nameColumn"/></if>
            <if test="entity.goodsId != null"><include refid="goodsIdColumn"/></if>
            <if test="entity.inventoryId != null"><include refid="inventoryIdColumn"/></if>
            <if test="entity.code != null"><include refid="codeColumn"/></if>
            <if test="entity.status != null"><include refid="statusColumn"/></if>
            <if test="entity.type != null"><include refid="typeColumn"/></if>
            <if test="entity.createTime != null"><include refid="createTimeColumn"/></if>
            <if test="entity.updateTime != null"><include refid="updateTimeColumn"/></if>
            <if test="entity.createMember != null"><include refid="createMemberColumn"/></if>
            <if test="entity.updateMember != null"><include refid="updateMemberColumn"/></if>
            <if test="entity.remark != null"><include refid="remarkColumn"/></if>
            <if test="entity.resource != null"><include refid="resourceColumn"/></if>
        </set>
    </sql>
    <sql id="entityColumn">
        <include refid="nameColumn"/>
        <include refid="goodsIdColumn"/>
        <include refid="inventoryIdColumn"/>
        <include refid="codeColumn"/>
        <include refid="statusColumn"/>
        <include refid="typeColumn"/>
        <include refid="createTimeColumn"/>
        <include refid="updateTimeColumn"/>
        <include refid="createMemberColumn"/>
        <include refid="updateMemberColumn"/>
        <include refid="remarkColumn"/>
        <include refid="resourceColumn"/>
    </sql>
    <!-- 通用查询结果列 -->
    <sql id="queryListColumnBase">
        t.id,
         t.name,
         t.goods_id,
         t.inventory_id,
         t.code,
         t.status,
         t.type,
         t.create_time,
         t.update_time,
         t.create_member,
         t.update_member,
         t.remark,
         t.resource
    </sql>
    <!-- 通用查询结果列VO -->
    <sql id="queryListColumn">
        <include refid="queryListColumnBase"/>,
        (select m.name from `member` m where m.id = t.create_member) as create_username,
        (select m.name from `member` m where m.id = t.update_member) as update_username,
        (select i.name from `inventory` i where i.id = t.inventory_id) as inventory_name,
        (select i.layer from `inventory` i where i.id = t.inventory_id) as inventory_layer,
        (select i.status from `inventory` i where i.id = t.inventory_id) as inventory_status,
        (select g.name from `goods` g where g.id = t.goods_id) as goods_name,
        (select g.type from `goods` g where g.id = t.goods_id) as goods_type
    </sql>
    <!-- 条件通用查询列 -->
    <sql id="queryListWhere">
        <where>
            <if test="query.goodsId != null">
                AND t.goods_id = #{query.goodsId}
            </if>
            <if test="query.inventoryId != null">
                AND t.inventory_id = #{query.inventoryId}
            </if>

            <if test="query.code != null">
                AND t.code = #{query.code}
            </if>
            <if test="query.param != null">
                AND (t.code LIKE CONCAT('%', #{query.param}, '%') or t.status LIKE CONCAT('%', #{query.param}, '%')) or t.name LIKE CONCAT('%',#{query.param},'%')
            </if>
            <if test="query.offset != null and query.limit != null">
                limit #{query.offset},#{query.limit}
            </if>
            <if test="query.status != null">
                AND t.status = #{query.status}
            </if>
            <if test="query.type != null">
                AND t.type = #{query.type}
            </if>
            <if test="query.createTime != null">
                AND t.create_time BETWEEN #{query.createTime} AND DATE_ADD(#{query.createTime}, INTERVAL 1 DAY)
            </if>
        </where>
    </sql>

    <sql id="order">
        <choose>
            <when test="query.sidx != null and query.sidx.trim() !='' and query.order != null and query.order.trim() !=''">
                order by ${query.sidx} ${query.order}
            </when>
            <otherwise>
                order by t.id desc
            </otherwise>
        </choose>
        <if test="query.offset != null and query.limit != null">
            limit #{query.offset},#{query.limit}
        </if>
    </sql>

    <insert id="saveBatch" parameterType="java.util.Collection" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        insert into `task`
        (
        <include refid="saveColumnBase"/>
        )
        values
        <foreach collection="collection" index="index" item="entity" separator=",">
            (
            <include refid="saveColumnValue"/>
            )
        </foreach>
    </insert>

    <insert id="save" parameterType="com.wms.pojo.Task" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        insert into `task`
        (
        <include refid="saveColumnBase"/>
        )
        values
        (
        <include refid="saveColumnValue"/>
        )
    </insert>

    <delete id="deleteByIds" parameterType="java.lang.Long">
        delete from `task`
        where id in
        <foreach collection="ids" item="item" index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>

    <update id="update" parameterType="com.wms.pojo.Task" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        update `task`
        <set>
            <include refid="entityColumn"/>
        </set>
        where id= #{entity.id}
    </update>

    <update id="updateNotEmpty" parameterType="com.wms.pojo.Task" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        update `task`
        <include refid="updateColumnNotNull"/>
        where id= #{id}
    </update>


    <update id="updateBatchNotEmpty" parameterType="java.util.Collection" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        <foreach collection="collection" item="entity" index="index" separator=";">
            update `task`
            <include refid="updateColumnNotNull"/>
            where id = #{entity.id}
        </foreach>
    </update>

    <update id="updateBatchByIdNotEmpty">
        update `task`
        <include refid="updateColumnNotNull"/>
        where id in
        <foreach collection="ids" item="item" index="index" separator="," open="(" close=")">
            #{item}
        </foreach>
    </update>

    <update id="updateBatchById" >
        update `task`
        set
        <include refid="entityColumn"/>
        where id in
        <foreach collection="ids" item="item" index="index" separator="," open="(" close=")">
            #{item}
        </foreach>
    </update>

    <update id="updateBatch" parameterType="java.util.Collection" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        <foreach collection="collection" item="entity" index="index" separator=";">
            update `task`
            set
            <include refid="entityColumn"/>
            where id= #{entity.id}
        </foreach>
    </update>

    <select id="queryById" parameterType="java.lang.Long" resultMap="TaskMap">
        select
        <include refid="queryListColumnBase"/>
        from `task` t
        where id = #{id}
    </select>

    <select id="queryByIds" resultMap="TaskMap">
        select
        <include refid="queryListColumnBase"/>
        from `task` t
        where id in
        <foreach collection="ids" index="index" item="item" separator="," open="(" close=")">
            #{item}
        </foreach>
    </select>

    <select id="list"  parameterType="java.util.Map" resultMap="TaskVoMap">
        select
        <include refid="queryListColumn"/>
        from `task` t
        <include refid="queryListWhere"/>
    </select>

    <select id="pageList" resultMap= "TaskVoMap">
        select
        <include refid="queryListColumn"/>
        from `task` t
        <include refid="queryListWhere"/>
        <include refid="order"/>
    </select>


    <select id="queryList" parameterType="java.util.Map" resultMap= "TaskMap">
        select
        <include refid="queryListColumnBase"/>
        from `task` t
        <include refid="queryListWhere"/>
    </select>

    <select id="queryTotal" resultType="java.lang.Long">
        select count(*) from  `task` t
        <include refid="queryListWhere"/>
    </select>

    <select id="lastCode" resultType="java.lang.String">
        select t.code from `task` t where date(t.create_time) = curdate() order by t.code desc limit 1;
    </select>

</mapper>
