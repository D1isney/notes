<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wms.dao.MemberDao">


    <!-- 通用查询映射结果 -->
    <resultMap id="memberMap" type="com.wms.filter.login.Member">
        <id column="id" property="id" />
        <result column="username" property="username" />
        <result column="password" property="password" />
        <result column="name" property="name" />
        <result column="sex" property="sex" />
        <result column="age" property="age" />
        <result column="email" property="email" />
        <result column="phone" property="phone" />
        <result column="address" property="address" />
        <result column="birthday" property="birthday" />
        <result column="create_time" property="createTime" />
        <result column="update_time" property="updateTime" />
        <result column="expiration_time" property="expirationTime" />
        <result column="create_member" property="createMember" />
        <result column="update_member" property="updateMember" />
        <result column="status" property="status" />
        <result column="salt" property="salt" />
    </resultMap>

    <!-- 通用查询映射结果 Vo) -->
    <resultMap id="memberVoMap" type="com.wms.vo.MemberVo" extends="memberMap">

    </resultMap>
    <!-- 保存列 -->
    <sql id="saveColumnBase">
        `username`,
        `password`,
        `name`,
        `sex`,
        `age`,
        `email`,
        `phone`,
        `address`,
        `birthday`,
        `create_time`,
        `update_time`,
        `expiration_time`,
        `create_member`,
        `update_member`,
        `status`,
        `salt`
    </sql>
    <!-- 保存列value -->
    <sql id="saveColumnValue">
        #{entity.username},
        #{entity.password},
        #{entity.name},
        #{entity.sex},
        #{entity.age},
        #{entity.email},
        #{entity.phone},
        #{entity.address},
        #{entity.birthday},
        #{entity.createTime},
        #{entity.updateTime},
        #{entity.expirationTime},
        #{entity.createMember},
        #{entity.updateMember},
        #{entity.status},
        #{entity.salt}
    </sql>

    <sql id="usernameColumn">`username` = #{entity.username},</sql>
    <sql id="passwordColumn">`password` = #{entity.password},</sql>
    <sql id="nameColumn">`name` = #{entity.name},</sql>
    <sql id="sexColumn">`sex` = #{entity.sex},</sql>
    <sql id="ageColumn">`age` = #{entity.age},</sql>
    <sql id="emailColumn">`email` = #{entity.email},</sql>
    <sql id="phoneColumn">`phone` = #{entity.phone},</sql>
    <sql id="addressColumn">`address` = #{entity.address},</sql>
    <sql id="birthdayColumn">`birthday` = #{entity.birthday},</sql>
    <sql id="createTimeColumn">`create_time` = #{entity.createTime},</sql>
    <sql id="updateTimeColumn">`update_time` = #{entity.updateTime},</sql>
    <sql id="expirationTimeColumn">`expiration_time` = #{entity.expirationTime},</sql>
    <sql id="createMemberColumn">`create_member` = #{entity.createMember},</sql>
    <sql id="updateMemberColumn">`update_member` = #{entity.updateMember},</sql>
    <sql id="statusColumn">`status` = #{entity.status},</sql>
    <sql id="saltColumn">`salt` = #{entity.salt}</sql>

    <sql id="updateColumnNotNull">
        <set>
            <if test="entity.username != null"><include refid="usernameColumn"/></if>
            <if test="entity.password != null"><include refid="passwordColumn"/></if>
            <if test="entity.name != null"><include refid="nameColumn"/></if>
            <if test="entity.sex != null"><include refid="sexColumn"/></if>
            <if test="entity.age != null"><include refid="ageColumn"/></if>
            <if test="entity.email != null"><include refid="emailColumn"/></if>
            <if test="entity.phone != null"><include refid="phoneColumn"/></if>
            <if test="entity.address != null"><include refid="addressColumn"/></if>
            <if test="entity.birthday != null"><include refid="birthdayColumn"/></if>
            <if test="entity.createTime != null"><include refid="createTimeColumn"/></if>
            <if test="entity.updateTime != null"><include refid="updateTimeColumn"/></if>
            <if test="entity.expirationTime != null"><include refid="expirationTimeColumn"/></if>
            <if test="entity.createMember != null"><include refid="createMemberColumn"/></if>
            <if test="entity.updateMember != null"><include refid="updateMemberColumn"/></if>
            <if test="entity.status != null"><include refid="statusColumn"/></if>
            <if test="entity.salt != null"><include refid="saltColumn"/></if>
        </set>
    </sql>
    <sql id="entityColumn">
        <include refid="usernameColumn"/>
        <include refid="passwordColumn"/>
        <include refid="nameColumn"/>
        <include refid="sexColumn"/>
        <include refid="ageColumn"/>
        <include refid="emailColumn"/>
        <include refid="phoneColumn"/>
        <include refid="addressColumn"/>
        <include refid="birthdayColumn"/>
        <include refid="createTimeColumn"/>
        <include refid="updateTimeColumn"/>
        <include refid="expirationTimeColumn"/>
        <include refid="createMemberColumn"/>
        <include refid="updateMemberColumn"/>
        <include refid="statusColumn"/>
        <include refid="saltColumn"/>
    </sql>
    <!-- 通用查询结果列 -->
    <sql id="queryListColumnBase">
        t.id,
         t.username,
         t.password,
         t.name,
         t.sex,
         t.age,
         t.email,
         t.phone,
         t.address,
         t.birthday,
         t.create_time,
         t.update_time,
         t.expiration_time,
         t.create_member,
         t.update_member,
         t.status,
         t.salt
    </sql>
    <!-- 通用查询结果列VO -->
    <sql id="queryListColumn">
        <include refid="queryListColumnBase"/>
    </sql>
    <!-- 条件通用查询列 -->
    <sql id="queryListWhere">
        <where>
            <if test="query.username != null">
                t.username = #{query.username}
            </if>
        </where>
    </sql>

    <sql id="order">
        <choose>
            <when test="query.sidx != null and query.sidx.trim() !='' and query.order != null and query.order.trim() !=''">
                order by ${query.sidx} ${query.order}
            </when>
            <otherwise>
                order by t.id desc
            </otherwise>
        </choose>
        <if test="query.offset != null and query.limit != null">
            limit #{query.offset},#{query.limit}
        </if>
    </sql>

    <insert id="saveBatch" parameterType="java.util.Collection" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        insert into `member`
        (
        <include refid="saveColumnBase"/>
        )
        values
        <foreach collection="collection" index="index" item="entity" separator=",">
            (
            <include refid="saveColumnValue"/>
            )
        </foreach>
    </insert>

    <insert id="save" parameterType="com.wms.filter.login.Member" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        insert into `member`
        (
        <include refid="saveColumnBase"/>
        )
        values
        (
        <include refid="saveColumnValue"/>
        )
    </insert>

    <delete id="deleteByIds" parameterType="java.lang.Long">
        delete from `member`
        where id in
        <foreach collection="ids" item="item" index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>

    <update id="update" parameterType="com.wms.filter.login.Member" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        update `member`
        <set>
            <include refid="entityColumn"/>
        </set>
        where id= #{entity.id}
    </update>

    <update id="updateNotEmpty" parameterType="com.wms.filter.login.Member" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        update `member`
        <include refid="updateColumnNotNull"/>
        where id= #{id}
    </update>


    <update id="updateBatchNotEmpty" parameterType="java.util.Collection" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        <foreach collection="collection" item="entity" index="index" separator=";">
            update `member`
            <include refid="updateColumnNotNull"/>
            where id = #{entity.id}
        </foreach>
    </update>

    <update id="updateBatchByIdNotEmpty">
        update `member`
        <include refid="updateColumnNotNull"/>
        where id in
        <foreach collection="ids" item="item" index="index" separator="," open="(" close=")">
            #{item}
        </foreach>
    </update>

    <update id="updateBatchById" >
        update `member`
        set
        <include refid="entityColumn"/>
        where id in
        <foreach collection="ids" item="item" index="index" separator="," open="(" close=")">
            #{item}
        </foreach>
    </update>

    <update id="updateBatch" parameterType="java.util.Collection" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        <foreach collection="collection" item="entity" index="index" separator=";">
            update `member`
            set
            <include refid="entityColumn"/>
            where id= #{entity.id}
        </foreach>
    </update>

    <select id="queryById" parameterType="java.lang.Long" resultMap="memberMap">
        select
        <include refid="queryListColumnBase"/>
        from `member` t
        where id = #{id}
    </select>

    <select id="queryByIds" resultMap="memberMap">
        select
        <include refid="queryListColumnBase"/>
        from `member` t
        where id in
        <foreach collection="ids" index="index" item="item" separator="," open="(" close=")">
            #{item}
        </foreach>
    </select>

    <select id="list"  parameterType="java.util.Map" resultMap="memberVoMap">
        select
        <include refid="queryListColumn"/>
        from `member` t
        <include refid="queryListWhere"/>
    </select>

    <select id="pageList" resultMap= "memberVoMap">
        select
        <include refid="queryListColumn"/>
        from `member` t
        <include refid="queryListWhere"/>
        <include refid="order"/>
    </select>


    <select id="queryList" parameterType="java.util.Map" resultMap= "memberMap">
        select
        <include refid="queryListColumnBase"/>
        from `member` t
        <include refid="queryListWhere"/>
    </select>

    <select id="queryTotal" resultType="java.lang.Long">
        select count(*) from  `member` t
        <include refid="queryListWhere"/>
    </select>
    <select id="getPermissionsByMember" resultType="java.lang.String" parameterType="java.lang.Long">
        SELECT
            DISTINCT p.path
        FROM
            member_role mr
                LEFT JOIN role r ON r.id = mr.role_id
                LEFT JOIN role_permissions rp ON mr.role_id = rp.role_id
                LEFT JOIN permissions p on rp.permissions_id = p.id
        WHERE
            mr.member_id = #{id}
          AND r.`status` = 1
    </select>


</mapper>
