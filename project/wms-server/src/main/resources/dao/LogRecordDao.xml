<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wms.dao.LogRecordDao">


    <!-- 通用查询映射结果 -->
    <resultMap id="logMap" type="com.wms.pojo.LogRecord">
        <id column="id" property="id" />
        <result column="message" property="message" />
        <result column="member_id" property="memberId" />
        <result column="create_time" property="createTime" />
        <result column="type" property="type" />
        <result column="path" property="path" />
        <result column="params" property="params" />
        <result column="result" property="result" />
        <result column="execute_time" property="executeTime" />
    </resultMap>

    <!-- 通用查询映射结果 Vo) -->
    <resultMap id="logVoMap" type="com.wms.vo.LogRecordVo" extends="logMap">
        <result column="username" property="username"/>
    </resultMap>
    <!-- 保存列 -->
    <sql id="saveColumnBase">
        `message`,
        `member_id`,
        `create_time`,
        `type`,
        `path`,
        `params`,
        `result`,
        `execute_time`
    </sql>
    <!-- 保存列value -->
    <sql id="saveColumnValue">
        #{entity.message},
        #{entity.memberId},
        #{entity.createTime},
        #{entity.type},
        #{entity.path},
        #{entity.params},
        #{entity.result},
        #{entity.executeTime}
    </sql>

    <sql id="messageColumn">`message` = #{entity.message},</sql>
    <sql id="memberIdColumn">`member_id` = #{entity.memberId},</sql>
    <sql id="createTimeColumn">`create_time` = #{entity.createTime},</sql>
    <sql id="typeColumn">`type` = #{entity.type},</sql>
    <sql id="pathColumn">`path` = #{entity.path},</sql>
    <sql id="paramsColumn">`params` = #{entity.params},</sql>
    <sql id="resultColumn">`result` = #{entity.result},</sql>
    <sql id="executeTimeColumn">`execute_time` = #{entity.executeTime}</sql>

    <sql id="updateColumnNotNull">
        <set>
            <if test="entity.message != null"><include refid="messageColumn"/></if>
            <if test="entity.memberId != null"><include refid="memberIdColumn"/></if>
            <if test="entity.createTime != null"><include refid="createTimeColumn"/></if>
            <if test="entity.type != null"><include refid="typeColumn"/></if>
            <if test="entity.path != null"><include refid="pathColumn"/></if>
            <if test="entity.params != null"><include refid="paramsColumn"/></if>
            <if test="entity.result != null"><include refid="resultColumn"/></if>
            <if test="entity.executeTime != null"><include refid="executeTimeColumn"/></if>
        </set>
    </sql>
    <sql id="entityColumn">
        <include refid="messageColumn"/>
        <include refid="memberIdColumn"/>
        <include refid="createTimeColumn"/>
        <include refid="typeColumn"/>
        <include refid="pathColumn"/>
        <include refid="paramsColumn"/>
        <include refid="resultColumn"/>
        <include refid="executeTimeColumn"/>
    </sql>
    <!-- 通用查询结果列 -->
    <sql id="queryListColumnBase">
        t.id,
         t.message,
         t.member_id,
         t.create_time,
         t.type,
         t.path,
         t.params,
         t.result,
         t.execute_time
    </sql>
    <!-- 通用查询结果列VO -->
    <sql id="queryListColumn">
        <include refid="queryListColumnBase"/>,
        (select m.name from `member` m where m.id = t.member_id) as username
    </sql>
    <!-- 条件通用查询列 -->
    <sql id="queryListWhere">
        <where>
            <if test="query.type != null">
                t.type = #{query.type}
            </if>
            <if test="query.createTime != null">
                and (t.create_time >= STR_TO_DATE(CONCAT(#{query.createTime}, ' 00:00:00'), '%Y-%m-%d %H:%i:%s')
                and STR_TO_DATE(CONCAT(#{query.createTime}, ' 23:59:59'), '%Y-%m-%d %H:%i:%s') > t.create_time)
            </if>
            <if test="query.operationType != null">
                t.type = 4 or t.type = 5
            </if>
        </where>
    </sql>

    <sql id="order">
        <choose>
            <when test="query.sidx != null and query.sidx.trim() !='' and query.order != null and query.order.trim() !=''">
                order by ${query.sidx} ${query.order}
            </when>
            <otherwise>
                order by t.id desc
            </otherwise>
        </choose>
        <if test="query.offset != null and query.limit != null">
            limit #{query.offset},#{query.limit}
        </if>
    </sql>

    <insert id="saveBatch" parameterType="java.util.Collection" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        insert into `log`
        (
        <include refid="saveColumnBase"/>
        )
        values
        <foreach collection="collection" index="index" item="entity" separator=",">
            (
            <include refid="saveColumnValue"/>
            )
        </foreach>
    </insert>

    <insert id="save" parameterType="com.wms.pojo.LogRecord" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        insert into `log`
        (
        <include refid="saveColumnBase"/>
        )
        values
        (
        <include refid="saveColumnValue"/>
        )
    </insert>

    <delete id="deleteByIds" parameterType="java.lang.Long">
        delete from `log`
        where id in
        <foreach collection="ids" item="item" index="index" open="(" separator="," close=")">
            #{item}
        </foreach>
    </delete>

    <update id="update" parameterType="com.wms.pojo.LogRecord" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        update `log`
        <set>
            <include refid="entityColumn"/>
        </set>
        where id= #{entity.id}
    </update>

    <update id="updateNotEmpty" parameterType="com.wms.pojo.LogRecord" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        update `log`
        <include refid="updateColumnNotNull"/>
        where id= #{id}
    </update>


    <update id="updateBatchNotEmpty" parameterType="java.util.Collection" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        <foreach collection="collection" item="entity" index="index" separator=";">
            update `log`
            <include refid="updateColumnNotNull"/>
            where id = #{entity.id}
        </foreach>
    </update>

    <update id="updateBatchByIdNotEmpty">
        update `log`
        <include refid="updateColumnNotNull"/>
        where id in
        <foreach collection="ids" item="item" index="index" separator="," open="(" close=")">
            #{item}
        </foreach>
    </update>

    <update id="updateBatchById" >
        update `log`
        set
        <include refid="entityColumn"/>
        where id in
        <foreach collection="ids" item="item" index="index" separator="," open="(" close=")">
            #{item}
        </foreach>
    </update>

    <update id="updateBatch" parameterType="java.util.Collection" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        <foreach collection="collection" item="entity" index="index" separator=";">
            update `log`
            set
            <include refid="entityColumn"/>
            where id= #{entity.id}
        </foreach>
    </update>

    <select id="queryById" parameterType="java.lang.Long" resultMap="logMap">
        select
        <include refid="queryListColumnBase"/>
        from `log` t
        where id = #{id}
    </select>

    <select id="queryByIds" resultMap="logMap">
        select
        <include refid="queryListColumnBase"/>
        from `log` t
        where id in
        <foreach collection="ids" index="index" item="item" separator="," open="(" close=")">
            #{item}
        </foreach>
    </select>

    <select id="list"  parameterType="java.util.Map" resultMap="logVoMap">
        select
        <include refid="queryListColumn"/>
        from `log` t
        <include refid="queryListWhere"/>
    </select>

    <select id="pageList" resultMap= "logVoMap">
        select
        <include refid="queryListColumn"/>
        from `log` t
        <include refid="queryListWhere"/>
        <include refid="order"/>
    </select>


    <select id="queryList" parameterType="java.util.Map" resultMap= "logMap">
        select
        <include refid="queryListColumnBase"/>
        from `log` t
        <include refid="queryListWhere"/>
    </select>

    <select id="queryTotal" resultType="java.lang.Long">
        select count(*) from  `log` t
        <include refid="queryListWhere"/>
    </select>


</mapper>
